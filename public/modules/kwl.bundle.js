(this.webpackChunk=this.webpackChunk||[]).push([[315],{5187:(e,t,r)=>{"use strict";var o=r(247);Object.defineProperty(t,"__esModule",{value:!0}),t.AbstractAsyncRequest=void 0;t.AbstractAsyncRequest=class{request(e){o.log("this is abstract implementation of ICommand, please make sure to override")}}},5481:(e,t,r)=>{"use strict";var o=r(247);Object.defineProperty(t,"__esModule",{value:!0}),t.AbstractCommand=void 0;t.AbstractCommand=class{run(){o.log("this is abstract implementation of ICommand, please make sure to override")}}},3570:(e,t,r)=>{"use strict";var o=r(247);Object.defineProperty(t,"__esModule",{value:!0}),t.AbstractModule=void 0;t.AbstractModule=class{constructor(){this.name="Abstract"}startModule(){o.info("this is abstract implementation of IInjectableExtensionModule, please make sure to override")}}},9809:(e,t,r)=>{"use strict";var o=r(247);Object.defineProperty(t,"__esModule",{value:!0}),t.AbstractParser=void 0;t.AbstractParser=class{constructor(){this.name=""}parse(e){o.log("WARNING: AbstractParser - parse called")}startModule(){}}},3558:(e,t,r)=>{"use strict";var o=r(247);Object.defineProperty(t,"__esModule",{value:!0}),t.AbstractSockComm=void 0;const s=r(3570);class n extends s.AbstractModule{constructor(){super(...arguments),this.clientMap=new Map,this.id="",this.totals=[]}run(e){return o.warn("Abstract Socket Comm run() was triggered  \nOverride this function in your own Socket \nExtension, or use the KSockService extension\n"),this}}t.AbstractSockComm=n},8440:(e,t,r)=>{"use strict";var o=r(247);Object.defineProperty(t,"__esModule",{value:!0}),t.AbstractSoundService=void 0;t.AbstractSoundService=class{loadSound(e){o.log("this is abstract implementation of ISoundService, please make sure to override")}}},2896:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TYPES=void 0,t.TYPES={FetchConfig:Symbol.for("FetchConfig"),Command:Symbol.for("Command"),LoadModule:Symbol.for("LoadModule"),InjectionTest:Symbol.for("InjectionTest"),Socket:Symbol.for("KSockService"),AssetData:Symbol.for("AssetDataVendor")}},6523:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SOCK=void 0,t.SOCK={CONNECT:"connect",AUTH_TOKEN:"AUTH_TOKEN",KICK:"disconnect",SOCK_ID:"SOCK_ID",GZIPPED_EVENT:"GZIP",AP_REQ:"assetPackREQ",CONNECTION:"connection",AP_RES:"assetPackRES"}},1705:(e,t,r)=>{"use strict";t.$$=t.QE=t.hb=t.d7=void 0;var o=r(3558);Object.defineProperty(t,"d7",{enumerable:!0,get:function(){return o.AbstractSockComm}});var s=r(3570);Object.defineProperty(t,"hb",{enumerable:!0,get:function(){return s.AbstractModule}});var n=r(8440);var a=r(5481);var c=r(5187);var i=r(9809);var u=r(2896);Object.defineProperty(t,"QE",{enumerable:!0,get:function(){return u.TYPES}});var l=r(6523);Object.defineProperty(t,"$$",{enumerable:!0,get:function(){return l.SOCK}})},247:(e,t,r)=>{var o=r(9023),s=r(2613);function n(){return(new Date).getTime()}var a,c=Array.prototype.slice,i={};a=void 0!==r.g&&r.g.console?r.g.console:"undefined"!=typeof window&&window.console?window.console:{};for(var u=[[function(){},"log"],[function(){a.log.apply(a,arguments)},"info"],[function(){a.log.apply(a,arguments)},"warn"],[function(){a.warn.apply(a,arguments)},"error"],[function(e){i[e]=n()},"time"],[function(e){var t=i[e];if(!t)throw new Error("No such label: "+e);delete i[e];var r=n()-t;a.log(e+": "+r+"ms")},"timeEnd"],[function(){var e=new Error;e.name="Trace",e.message=o.format.apply(null,arguments),a.error(e.stack)},"trace"],[function(e){a.log(o.inspect(e)+"\n")},"dir"],[function(e){if(!e){var t=c.call(arguments,1);s.ok(!1,o.format.apply(null,t))}},"assert"]],l=0;l<u.length;l++){var d=u[l],m=d[0],v=d[1];a[v]||(a[v]=m)}e.exports=a},2613:e=>{"use strict";e.exports=require("assert")},9023:e=>{"use strict";e.exports=require("util")}},e=>{e.O(0,[804],(()=>{return t=1705,e(e.s=t);var t}));e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,