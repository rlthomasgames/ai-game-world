(()=>{var t={5054:(t,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.sayGoodbye=n.sayHello=void 0,n.sayHello=function(){console.log("hi")},n.sayGoodbye=function(){console.log("goodbye")}},467:(t,n,e)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.sayGoodbye=n.sayHello=void 0;var r=e(5054);Object.defineProperty(n,"sayHello",{enumerable:!0,get:function(){return r.sayHello}}),Object.defineProperty(n,"sayGoodbye",{enumerable:!0,get:function(){return r.sayGoodbye}})},3343:(t,n,e)=>{e.r(n),e.d(n,{AsyncContainerModule:()=>en,BindingScopeEnum:()=>g,BindingTypeEnum:()=>b,Container:()=>tn,ContainerModule:()=>nn,LazyServiceIdentifer:()=>G,LazyServiceIdentifier:()=>G,METADATA_KEY:()=>Tn,MetadataReader:()=>j,TargetTypeEnum:()=>m,createTaggedDecorator:()=>cn,decorate:()=>ln,getServiceIdentifierAsString:()=>k,id:()=>_,inject:()=>yn,injectable:()=>dn,interfaces:()=>_n,multiBindToService:()=>pt,multiInject:()=>bn,named:()=>hn,namedConstraint:()=>Wt,optional:()=>vn,postConstruct:()=>An,preDestroy:()=>Sn,tagged:()=>fn,taggedConstraint:()=>qt,targetName:()=>mn,traverseAncerstors:()=>Ft,typeConstraint:()=>Bt,unmanaged:()=>gn});var r={};e.r(r),e.d(r,{DESIGN_PARAM_TYPES:()=>h,INJECT_TAG:()=>s,MULTI_INJECT_TAG:()=>u,NAMED_TAG:()=>i,NAME_TAG:()=>o,NON_CUSTOM_TAG_KEYS:()=>v,OPTIONAL_TAG:()=>c,PARAM_TYPES:()=>f,POST_CONSTRUCT:()=>p,PRE_DESTROY:()=>y,TAGGED:()=>l,TAGGED_PROP:()=>d,UNMANAGED_TAG:()=>a});var i="named",o="name",a="unmanaged",c="optional",s="inject",u="multi_inject",l="inversify:tagged",d="inversify:tagged_props",f="inversify:paramtypes",h="design:paramtypes",p="post_construct",y="pre_destroy";var v=[s,u,o,a,i,c],g={Request:"Request",Singleton:"Singleton",Transient:"Transient"},b={ConstantValue:"ConstantValue",Constructor:"Constructor",DynamicValue:"DynamicValue",Factory:"Factory",Function:"Function",Instance:"Instance",Invalid:"Invalid",Provider:"Provider"},m={ClassProperty:"ClassProperty",ConstructorArgument:"ConstructorArgument",Variable:"Variable"},w=0;function _(){return w++}var A=function(){function t(t,n){this.id=_(),this.activated=!1,this.serviceIdentifier=t,this.scope=n,this.type=b.Invalid,this.constraint=function(t){return!0},this.implementationType=null,this.cache=null,this.factory=null,this.provider=null,this.onActivation=null,this.onDeactivation=null,this.dynamicValue=null}return t.prototype.clone=function(){var n=new t(this.serviceIdentifier,this.scope);return n.activated=n.scope===g.Singleton&&this.activated,n.implementationType=this.implementationType,n.dynamicValue=this.dynamicValue,n.scope=this.scope,n.type=this.type,n.factory=this.factory,n.provider=this.provider,n.constraint=this.constraint,n.onActivation=this.onActivation,n.onDeactivation=this.onDeactivation,n.cache=this.cache,n},t}(),S="Cannot apply @injectable decorator multiple times.",T="Metadata key was used more than once in a parameter:",I="NULL argument",C="Key Not Found",E="Ambiguous match found for serviceIdentifier:",D="No matching bindings found for serviceIdentifier:",P="Missing required @injectable annotation in:",x="The @inject @multiInject @tagged and @named decorators must be applied to the parameters of a class constructor or a class property.",M=function(t,n){return"onDeactivation() error in class "+t+": "+n},j=function(){function t(){}return t.prototype.getConstructorMetadata=function(t){return{compilerGeneratedMetadata:Reflect.getMetadata(f,t),userGeneratedMetadata:Reflect.getMetadata(l,t)||{}}},t.prototype.getPropertiesMetadata=function(t){return Reflect.getMetadata(d,t)||[]},t}(),R=0,N=1;function O(t){return t instanceof RangeError||"Maximum call stack size exceeded"===t.message}function k(t){return"function"==typeof t?t.name:"symbol"==typeof t?t.toString():t}function F(t,n,e){var r="",i=e(t,n);return 0!==i.length&&(r="\nRegistered bindings:",i.forEach((function(t){var n="Object";null!==t.implementationType&&(n=B(t.implementationType)),r=r+"\n "+n,t.constraint.metaData&&(r=r+" - "+t.constraint.metaData)}))),r}function q(t,n){return null!==t.parentRequest&&(t.parentRequest.serviceIdentifier===n||q(t.parentRequest,n))}function W(t){t.childRequests.forEach((function(t){if(q(t,t.serviceIdentifier)){var n=function(t){var n=function t(n,e){void 0===e&&(e=[]);var r=k(n.serviceIdentifier);return e.push(r),null!==n.parentRequest?t(n.parentRequest,e):e}(t);return n.reverse().join(" --\x3e ")}(t);throw new Error("Circular dependency found: "+n)}W(t)}))}function B(t){if(t.name)return t.name;var n=t.toString(),e=n.match(/^function\s*([^\s(]+)/);return e?e[1]:"Anonymous function: "+n}var K=function(){function t(t){this.id=_(),this.container=t}return t.prototype.addPlan=function(t){this.plan=t},t.prototype.setCurrentRequest=function(t){this.currentRequest=t},t}(),V=function(){function t(t,n){this.key=t,this.value=n}return t.prototype.toString=function(){return this.key===i?"named: "+String(this.value).toString()+" ":"tagged: { key:"+this.key.toString()+", value: "+String(this.value)+" }"},t}(),H=function(t,n){this.parentContext=t,this.rootRequest=n},G=function(){function t(t){this._cb=t}return t.prototype.unwrap=function(){return this._cb()},t}(),Y=function(){function t(t){this.str=t}return t.prototype.startsWith=function(t){return 0===this.str.indexOf(t)},t.prototype.endsWith=function(t){var n,e=t.split("").reverse().join("");return n=this.str.split("").reverse().join(""),this.startsWith.call({str:n},e)},t.prototype.contains=function(t){return-1!==this.str.indexOf(t)},t.prototype.equals=function(t){return this.str===t},t.prototype.value=function(){return this.str},t}(),L=function(){function t(t,n,e,r){this.id=_(),this.type=t,this.serviceIdentifier=e;var o="symbol"==typeof n?n.toString().slice(7,-1):n;this.name=new Y(o||""),this.identifier=n,this.metadata=new Array;var a=null;"string"==typeof r?a=new V(i,r):r instanceof V&&(a=r),null!==a&&this.metadata.push(a)}return t.prototype.hasTag=function(t){for(var n=0,e=this.metadata;n<e.length;n++){if(e[n].key===t)return!0}return!1},t.prototype.isArray=function(){return this.hasTag(u)},t.prototype.matchesArray=function(t){return this.matchesTag(u)(t)},t.prototype.isNamed=function(){return this.hasTag(i)},t.prototype.isTagged=function(){return this.metadata.some((function(t){return v.every((function(n){return t.key!==n}))}))},t.prototype.isOptional=function(){return this.matchesTag(c)(!0)},t.prototype.getNamedTag=function(){return this.isNamed()?this.metadata.filter((function(t){return t.key===i}))[0]:null},t.prototype.getCustomTags=function(){return this.isTagged()?this.metadata.filter((function(t){return v.every((function(n){return t.key!==n}))})):null},t.prototype.matchesNamedTag=function(t){return this.matchesTag(i)(t)},t.prototype.matchesTag=function(t){var n=this;return function(e){for(var r=0,i=n.metadata;r<i.length;r++){var o=i[r];if(o.key===t&&o.value===e)return!0}return!1}},t}(),U=function(t,n,e){if(e||2===arguments.length)for(var r,i=0,o=n.length;i<o;i++)!r&&i in n||(r||(r=Array.prototype.slice.call(n,0,i)),r[i]=n[i]);return t.concat(r||Array.prototype.slice.call(n))};function z(t,n,e,r){var i=t.getConstructorMetadata(e),o=i.compilerGeneratedMetadata;if(void 0===o)throw new Error(P+" "+n+".");var a=i.userGeneratedMetadata,c=Object.keys(a),s=0===e.length&&c.length>0,u=c.length>e.length,l=function(t,n,e,r,i){for(var o=[],a=0;a<i;a++){var c=J(a,t,n,e,r);null!==c&&o.push(c)}return o}(r,n,o,a,s||u?c.length:e.length),d=Z(t,e,n);return U(U([],l,!0),d,!0)}function J(t,n,e,r,i){var o=i[t.toString()]||[],a=$(o),c=!0!==a.unmanaged,s=r[t],u=a.inject||a.multiInject;if((s=u||s)instanceof G&&(s=s.unwrap()),c){if(!n&&(s===Object||s===Function||void 0===s))throw new Error("Missing required @inject or @multiInject annotation in: argument "+t+" in class "+e+".");var l=new L(m.ConstructorArgument,a.targetName,s);return l.metadata=o,l}return null}function Q(t,n,e,r){var i=t||n;if(void 0===i){var o=P+" for property "+String(e)+" in class "+r+".";throw new Error(o)}return i}function Z(t,n,e){for(var r=t.getPropertiesMetadata(n),i=[],o=Object.getOwnPropertySymbols(r),a=0,c=Object.keys(r).concat(o);a<c.length;a++){var s=c[a],u=r[s],l=$(u),d=l.targetName||s,f=Q(l.inject,l.multiInject,s,e),h=new L(m.ClassProperty,d,f);h.metadata=u,i.push(h)}var p=Object.getPrototypeOf(n.prototype).constructor;if(p!==Object){var y=Z(t,p,e);i=U(U([],i,!0),y,!0)}return i}function X(t,n){var e=Object.getPrototypeOf(n.prototype).constructor;if(e!==Object){var r=z(t,B(e),e,!0),i=r.map((function(t){return t.metadata.filter((function(t){return t.key===a}))})),o=[].concat.apply([],i).length,c=r.length-o;return c>0?c:X(t,e)}return 0}function $(t){var n={};return t.forEach((function(t){n[t.key.toString()]=t.value})),{inject:n[s],multiInject:n[u],targetName:n[o],unmanaged:n[a]}}var tt=function(){function t(t,n,e,r,i){this.id=_(),this.serviceIdentifier=t,this.parentContext=n,this.parentRequest=e,this.target=i,this.childRequests=[],this.bindings=Array.isArray(r)?r:[r],this.requestScope=null===e?new Map:null}return t.prototype.addChildRequest=function(n,e,r){var i=new t(n,this.parentContext,this,e,r);return this.childRequests.push(i),i},t}();function nt(t){return t._bindingDictionary}function et(t,n,e,r,i){var o=it(e.container,i.serviceIdentifier),a=[];return o.length===R&&e.container.options.autoBindInjectable&&"function"==typeof i.serviceIdentifier&&t.getConstructorMetadata(i.serviceIdentifier).compilerGeneratedMetadata&&(e.container.bind(i.serviceIdentifier).toSelf(),o=it(e.container,i.serviceIdentifier)),a=n?o:o.filter((function(t){var n=new tt(t.serviceIdentifier,e,r,t,i);return t.constraint(n)})),function(t,n,e,r){switch(n.length){case R:if(e.isOptional())return n;var i=k(t),o=D;throw o+=function(t,n){if(n.isTagged()||n.isNamed()){var e="",r=n.getNamedTag(),i=n.getCustomTags();return null!==r&&(e+=r.toString()+"\n"),null!==i&&i.forEach((function(t){e+=t.toString()+"\n"}))," "+t+"\n "+t+" - "+e}return" "+t}(i,e),o+=F(r,i,it),new Error(o);case N:return n;default:if(e.isArray())return n;i=k(t),o=E+" "+i;throw o+=F(r,i,it),new Error(o)}}(i.serviceIdentifier,a,i,e.container),a}function rt(t,n,e,r,i,o){var a,c;if(null===i){a=et(t,n,r,null,o),c=new tt(e,r,null,a,o);var s=new H(r,c);r.addPlan(s)}else a=et(t,n,r,i,o),c=i.addChildRequest(o.serviceIdentifier,a,o);a.forEach((function(n){var e=null;if(o.isArray())e=c.addChildRequest(n.serviceIdentifier,n,o);else{if(n.cache)return;e=c}if(n.type===b.Instance&&null!==n.implementationType){var i=function(t,n){return z(t,B(n),n,!1)}(t,n.implementationType);if(!r.container.options.skipBaseClassChecks){var a=X(t,n.implementationType);if(i.length<a){var s=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return"The number of constructor arguments in the derived class "+t[0]+" must be >= than the number of constructor arguments of its base class."}(B(n.implementationType));throw new Error(s)}}i.forEach((function(n){rt(t,!1,n.serviceIdentifier,r,e,n)}))}}))}function it(t,n){var e=[],r=nt(t);return r.hasKey(n)?e=r.get(n):null!==t.parent&&(e=it(t.parent,n)),e}function ot(t,n,e,r,i,o,a,c){void 0===c&&(c=!1);var l=new K(n),d=function(t,n,e,r,i,o){var a=new V(t?u:s,e),c=new L(n,r,e,a);if(void 0!==i){var l=new V(i,o);c.metadata.push(l)}return c}(e,r,i,"",o,a);try{return rt(t,c,i,l,null,d),l}catch(t){throw O(t)&&W(l.plan.rootRequest),t}}function at(t){return("object"==typeof t&&null!==t||"function"==typeof t)&&"function"==typeof t.then}function ct(t){return!!at(t)||Array.isArray(t)&&t.some(at)}var st,ut=function(t,n,e,r){return new(e||(e=Promise))((function(i,o){function a(t){try{s(r.next(t))}catch(t){o(t)}}function c(t){try{s(r.throw(t))}catch(t){o(t)}}function s(t){var n;t.done?i(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(a,c)}s((r=r.apply(t,n||[])).next())}))},lt=function(t,n){var e,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(o){return function(c){return function(o){if(e)throw new TypeError("Generator is already executing.");for(;a;)try{if(e=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=n.call(t,a)}catch(t){o=[6,t],r=0}finally{e=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,c])}}},dt=function(t,n,e){t.has(n.id)||t.set(n.id,e)},ft=function(t,n){t.cache=n,t.activated=!0,at(n)&&ht(t,n)},ht=function(t,n){return ut(void 0,void 0,void 0,(function(){var e,r;return lt(this,(function(i){switch(i.label){case 0:return i.trys.push([0,2,,3]),[4,n];case 1:return e=i.sent(),t.cache=e,[3,3];case 2:throw r=i.sent(),t.cache=null,t.activated=!1,r;case 3:return[2]}}))}))};!function(t){t.DynamicValue="toDynamicValue",t.Factory="toFactory",t.Provider="toProvider"}(st||(st={}));var pt=function(t){return function(n){return function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return e.forEach((function(e){return t.bind(e).toService(n)}))}}},yt=function(){return yt=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var i in n=arguments[e])Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i]);return t},yt.apply(this,arguments)},vt=function(t,n,e,r){return new(e||(e=Promise))((function(i,o){function a(t){try{s(r.next(t))}catch(t){o(t)}}function c(t){try{s(r.throw(t))}catch(t){o(t)}}function s(t){var n;t.done?i(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(a,c)}s((r=r.apply(t,n||[])).next())}))},gt=function(t,n){var e,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(o){return function(c){return function(o){if(e)throw new TypeError("Generator is already executing.");for(;a;)try{if(e=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=n.call(t,a)}catch(t){o=[6,t],r=0}finally{e=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,c])}}},bt=function(t,n,e){if(e||2===arguments.length)for(var r,i=0,o=n.length;i<o;i++)!r&&i in n||(r||(r=Array.prototype.slice.call(n,0,i)),r[i]=n[i]);return t.concat(r||Array.prototype.slice.call(n))};function mt(t,n,e){var r;if(n.length>0){var i=function(t,n){return t.reduce((function(t,e){var r=n(e);return e.target.type===m.ConstructorArgument?t.constructorInjections.push(r):(t.propertyRequests.push(e),t.propertyInjections.push(r)),t.isAsync||(t.isAsync=ct(r)),t}),{constructorInjections:[],propertyInjections:[],propertyRequests:[],isAsync:!1})}(n,e),o=yt(yt({},i),{constr:t});r=i.isAsync?function(t){return vt(this,void 0,void 0,(function(){var n,e;return gt(this,(function(r){switch(r.label){case 0:return[4,_t(t.constructorInjections)];case 1:return n=r.sent(),[4,_t(t.propertyInjections)];case 2:return e=r.sent(),[2,wt(yt(yt({},t),{constructorInjections:n,propertyInjections:e}))]}}))}))}(o):wt(o)}else r=new t;return r}function wt(t){var n,e=new((n=t.constr).bind.apply(n,bt([void 0],t.constructorInjections,!1)));return t.propertyRequests.forEach((function(n,r){var i=n.target.identifier,o=t.propertyInjections[r];n.target.isOptional()&&void 0===o||(e[i]=o)})),e}function _t(t){return vt(this,void 0,void 0,(function(){var n,e,r,i;return gt(this,(function(o){for(n=[],e=0,r=t;e<r.length;e++)i=r[e],Array.isArray(i)?n.push(Promise.all(i)):n.push(i);return[2,Promise.all(n)]}))}))}function At(t,n){var e=function(t,n){var e,r;if(Reflect.hasMetadata(p,t)){var i=Reflect.getMetadata(p,t);try{return null===(r=(e=n)[i.value])||void 0===r?void 0:r.call(e)}catch(n){if(n instanceof Error)throw new Error((o=t.name,a=n.message,"@postConstruct error in class "+o+": "+a))}}var o,a}(t,n);return at(e)?e.then((function(){return n})):n}function St(t,n){t.scope!==g.Singleton&&function(t,n){var e="Class cannot be instantiated in "+(t.scope===g.Request?"request":"transient")+" scope.";if("function"==typeof t.onDeactivation)throw new Error(M(n.name,e));if(Reflect.hasMetadata(y,n))throw new Error("@preDestroy error in class "+n.name+": "+e)}(t,n)}var Tt=function(t,n,e,r){return new(e||(e=Promise))((function(i,o){function a(t){try{s(r.next(t))}catch(t){o(t)}}function c(t){try{s(r.throw(t))}catch(t){o(t)}}function s(t){var n;t.done?i(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(a,c)}s((r=r.apply(t,n||[])).next())}))},It=function(t,n){var e,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(o){return function(c){return function(o){if(e)throw new TypeError("Generator is already executing.");for(;a;)try{if(e=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=n.call(t,a)}catch(t){o=[6,t],r=0}finally{e=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,c])}}},Ct=function(t){return function(n){n.parentContext.setCurrentRequest(n);var e=n.bindings,r=n.childRequests,i=n.target&&n.target.isArray(),o=!(n.parentRequest&&n.parentRequest.target&&n.target&&n.parentRequest.target.matchesArray(n.target.serviceIdentifier));if(i&&o)return r.map((function(n){return Ct(t)(n)}));if(!n.target.isOptional()||0!==e.length){var a=e[0];return xt(t,n,a)}}},Et=function(t,n){var e=function(t){switch(t.type){case b.Factory:return{factory:t.factory,factoryType:st.Factory};case b.Provider:return{factory:t.provider,factoryType:st.Provider};case b.DynamicValue:return{factory:t.dynamicValue,factoryType:st.DynamicValue};default:throw new Error("Unexpected factory type "+t.type)}}(t);return function(t,n){try{return t()}catch(t){throw O(t)&&(t=n()),t}}((function(){return e.factory.bind(t)(n)}),(function(){return new Error((t=e.factoryType,r=n.currentRequest.serviceIdentifier.toString(),"It looks like there is a circular dependency in one of the '"+t+"' bindings. Please investigate bindings with service identifier '"+r+"'."));var t,r}))},Dt=function(t,n,e){var r,i=n.childRequests;switch(function(t){var n=null;switch(t.type){case b.ConstantValue:case b.Function:n=t.cache;break;case b.Constructor:case b.Instance:n=t.implementationType;break;case b.DynamicValue:n=t.dynamicValue;break;case b.Provider:n=t.provider;break;case b.Factory:n=t.factory}if(null===n){var e=k(t.serviceIdentifier);throw new Error("Invalid binding type: "+e)}}(e),e.type){case b.ConstantValue:case b.Function:r=e.cache;break;case b.Constructor:r=e.implementationType;break;case b.Instance:r=function(t,n,e,r){St(t,n);var i=mt(n,e,r);return at(i)?i.then((function(t){return At(n,t)})):At(n,i)}(e,e.implementationType,i,Ct(t));break;default:r=Et(e,n.parentContext)}return r},Pt=function(t,n,e){var r=function(t,n){return n.scope===g.Singleton&&n.activated?n.cache:n.scope===g.Request&&t.has(n.id)?t.get(n.id):null}(t,n);return null!==r||function(t,n,e){n.scope===g.Singleton&&ft(n,e),n.scope===g.Request&&dt(t,n,e)}(t,n,r=e()),r},xt=function(t,n,e){return Pt(t,e,(function(){var r=Dt(t,n,e);return r=at(r)?r.then((function(t){return Mt(n,e,t)})):Mt(n,e,r)}))};function Mt(t,n,e){var r,i=jt(t.parentContext,n,e),o=kt(t.parentContext.container),a=o.next();do{r=a.value;var c=t.parentContext,s=t.serviceIdentifier,u=Ot(r,s);i=at(i)?Nt(u,c,i):Rt(u,c,i),a=o.next()}while(!0!==a.done&&!nt(r).hasKey(t.serviceIdentifier));return i}var jt=function(t,n,e){return"function"==typeof n.onActivation?n.onActivation(t,e):e},Rt=function(t,n,e){for(var r=t.next();!r.done;){if(at(e=r.value(n,e)))return Nt(t,n,e);r=t.next()}return e},Nt=function(t,n,e){return Tt(void 0,void 0,void 0,(function(){var r,i;return It(this,(function(o){switch(o.label){case 0:return[4,e];case 1:r=o.sent(),i=t.next(),o.label=2;case 2:return i.done?[3,4]:[4,i.value(n,r)];case 3:return r=o.sent(),i=t.next(),[3,2];case 4:return[2,r]}}))}))},Ot=function(t,n){var e=t._activations;return e.hasKey(n)?e.get(n).values():[].values()},kt=function(t){for(var n=[t],e=t.parent;null!==e;)n.push(e),e=e.parent;return{next:function(){var t=n.pop();return void 0!==t?{done:!1,value:t}:{done:!0,value:void 0}}}};var Ft=function(t,n){var e=t.parentRequest;return null!==e&&(!!n(e)||Ft(e,n))},qt=function(t){return function(n){var e=function(e){return null!==e&&null!==e.target&&e.target.matchesTag(t)(n)};return e.metaData=new V(t,n),e}},Wt=qt(i),Bt=function(t){return function(n){var e=null;if(null!==n){if(e=n.bindings[0],"string"==typeof t)return e.serviceIdentifier===t;var r=n.bindings[0].implementationType;return t===r}return!1}},Kt=function(){function t(t){this._binding=t}return t.prototype.when=function(t){return this._binding.constraint=t,new Vt(this._binding)},t.prototype.whenTargetNamed=function(t){return this._binding.constraint=Wt(t),new Vt(this._binding)},t.prototype.whenTargetIsDefault=function(){return this._binding.constraint=function(t){return null!==t&&(null!==t.target&&!t.target.isNamed()&&!t.target.isTagged())},new Vt(this._binding)},t.prototype.whenTargetTagged=function(t,n){return this._binding.constraint=qt(t)(n),new Vt(this._binding)},t.prototype.whenInjectedInto=function(t){return this._binding.constraint=function(n){return null!==n&&Bt(t)(n.parentRequest)},new Vt(this._binding)},t.prototype.whenParentNamed=function(t){return this._binding.constraint=function(n){return null!==n&&Wt(t)(n.parentRequest)},new Vt(this._binding)},t.prototype.whenParentTagged=function(t,n){return this._binding.constraint=function(e){return null!==e&&qt(t)(n)(e.parentRequest)},new Vt(this._binding)},t.prototype.whenAnyAncestorIs=function(t){return this._binding.constraint=function(n){return null!==n&&Ft(n,Bt(t))},new Vt(this._binding)},t.prototype.whenNoAncestorIs=function(t){return this._binding.constraint=function(n){return null!==n&&!Ft(n,Bt(t))},new Vt(this._binding)},t.prototype.whenAnyAncestorNamed=function(t){return this._binding.constraint=function(n){return null!==n&&Ft(n,Wt(t))},new Vt(this._binding)},t.prototype.whenNoAncestorNamed=function(t){return this._binding.constraint=function(n){return null!==n&&!Ft(n,Wt(t))},new Vt(this._binding)},t.prototype.whenAnyAncestorTagged=function(t,n){return this._binding.constraint=function(e){return null!==e&&Ft(e,qt(t)(n))},new Vt(this._binding)},t.prototype.whenNoAncestorTagged=function(t,n){return this._binding.constraint=function(e){return null!==e&&!Ft(e,qt(t)(n))},new Vt(this._binding)},t.prototype.whenAnyAncestorMatches=function(t){return this._binding.constraint=function(n){return null!==n&&Ft(n,t)},new Vt(this._binding)},t.prototype.whenNoAncestorMatches=function(t){return this._binding.constraint=function(n){return null!==n&&!Ft(n,t)},new Vt(this._binding)},t}(),Vt=function(){function t(t){this._binding=t}return t.prototype.onActivation=function(t){return this._binding.onActivation=t,new Kt(this._binding)},t.prototype.onDeactivation=function(t){return this._binding.onDeactivation=t,new Kt(this._binding)},t}(),Ht=function(){function t(t){this._binding=t,this._bindingWhenSyntax=new Kt(this._binding),this._bindingOnSyntax=new Vt(this._binding)}return t.prototype.when=function(t){return this._bindingWhenSyntax.when(t)},t.prototype.whenTargetNamed=function(t){return this._bindingWhenSyntax.whenTargetNamed(t)},t.prototype.whenTargetIsDefault=function(){return this._bindingWhenSyntax.whenTargetIsDefault()},t.prototype.whenTargetTagged=function(t,n){return this._bindingWhenSyntax.whenTargetTagged(t,n)},t.prototype.whenInjectedInto=function(t){return this._bindingWhenSyntax.whenInjectedInto(t)},t.prototype.whenParentNamed=function(t){return this._bindingWhenSyntax.whenParentNamed(t)},t.prototype.whenParentTagged=function(t,n){return this._bindingWhenSyntax.whenParentTagged(t,n)},t.prototype.whenAnyAncestorIs=function(t){return this._bindingWhenSyntax.whenAnyAncestorIs(t)},t.prototype.whenNoAncestorIs=function(t){return this._bindingWhenSyntax.whenNoAncestorIs(t)},t.prototype.whenAnyAncestorNamed=function(t){return this._bindingWhenSyntax.whenAnyAncestorNamed(t)},t.prototype.whenAnyAncestorTagged=function(t,n){return this._bindingWhenSyntax.whenAnyAncestorTagged(t,n)},t.prototype.whenNoAncestorNamed=function(t){return this._bindingWhenSyntax.whenNoAncestorNamed(t)},t.prototype.whenNoAncestorTagged=function(t,n){return this._bindingWhenSyntax.whenNoAncestorTagged(t,n)},t.prototype.whenAnyAncestorMatches=function(t){return this._bindingWhenSyntax.whenAnyAncestorMatches(t)},t.prototype.whenNoAncestorMatches=function(t){return this._bindingWhenSyntax.whenNoAncestorMatches(t)},t.prototype.onActivation=function(t){return this._bindingOnSyntax.onActivation(t)},t.prototype.onDeactivation=function(t){return this._bindingOnSyntax.onDeactivation(t)},t}(),Gt=function(){function t(t){this._binding=t}return t.prototype.inRequestScope=function(){return this._binding.scope=g.Request,new Ht(this._binding)},t.prototype.inSingletonScope=function(){return this._binding.scope=g.Singleton,new Ht(this._binding)},t.prototype.inTransientScope=function(){return this._binding.scope=g.Transient,new Ht(this._binding)},t}(),Yt=function(){function t(t){this._binding=t,this._bindingWhenSyntax=new Kt(this._binding),this._bindingOnSyntax=new Vt(this._binding),this._bindingInSyntax=new Gt(t)}return t.prototype.inRequestScope=function(){return this._bindingInSyntax.inRequestScope()},t.prototype.inSingletonScope=function(){return this._bindingInSyntax.inSingletonScope()},t.prototype.inTransientScope=function(){return this._bindingInSyntax.inTransientScope()},t.prototype.when=function(t){return this._bindingWhenSyntax.when(t)},t.prototype.whenTargetNamed=function(t){return this._bindingWhenSyntax.whenTargetNamed(t)},t.prototype.whenTargetIsDefault=function(){return this._bindingWhenSyntax.whenTargetIsDefault()},t.prototype.whenTargetTagged=function(t,n){return this._bindingWhenSyntax.whenTargetTagged(t,n)},t.prototype.whenInjectedInto=function(t){return this._bindingWhenSyntax.whenInjectedInto(t)},t.prototype.whenParentNamed=function(t){return this._bindingWhenSyntax.whenParentNamed(t)},t.prototype.whenParentTagged=function(t,n){return this._bindingWhenSyntax.whenParentTagged(t,n)},t.prototype.whenAnyAncestorIs=function(t){return this._bindingWhenSyntax.whenAnyAncestorIs(t)},t.prototype.whenNoAncestorIs=function(t){return this._bindingWhenSyntax.whenNoAncestorIs(t)},t.prototype.whenAnyAncestorNamed=function(t){return this._bindingWhenSyntax.whenAnyAncestorNamed(t)},t.prototype.whenAnyAncestorTagged=function(t,n){return this._bindingWhenSyntax.whenAnyAncestorTagged(t,n)},t.prototype.whenNoAncestorNamed=function(t){return this._bindingWhenSyntax.whenNoAncestorNamed(t)},t.prototype.whenNoAncestorTagged=function(t,n){return this._bindingWhenSyntax.whenNoAncestorTagged(t,n)},t.prototype.whenAnyAncestorMatches=function(t){return this._bindingWhenSyntax.whenAnyAncestorMatches(t)},t.prototype.whenNoAncestorMatches=function(t){return this._bindingWhenSyntax.whenNoAncestorMatches(t)},t.prototype.onActivation=function(t){return this._bindingOnSyntax.onActivation(t)},t.prototype.onDeactivation=function(t){return this._bindingOnSyntax.onDeactivation(t)},t}(),Lt=function(){function t(t){this._binding=t}return t.prototype.to=function(t){return this._binding.type=b.Instance,this._binding.implementationType=t,new Yt(this._binding)},t.prototype.toSelf=function(){if("function"!=typeof this._binding.serviceIdentifier)throw new Error("The toSelf function can only be applied when a constructor is used as service identifier");var t=this._binding.serviceIdentifier;return this.to(t)},t.prototype.toConstantValue=function(t){return this._binding.type=b.ConstantValue,this._binding.cache=t,this._binding.dynamicValue=null,this._binding.implementationType=null,this._binding.scope=g.Singleton,new Ht(this._binding)},t.prototype.toDynamicValue=function(t){return this._binding.type=b.DynamicValue,this._binding.cache=null,this._binding.dynamicValue=t,this._binding.implementationType=null,new Yt(this._binding)},t.prototype.toConstructor=function(t){return this._binding.type=b.Constructor,this._binding.implementationType=t,this._binding.scope=g.Singleton,new Ht(this._binding)},t.prototype.toFactory=function(t){return this._binding.type=b.Factory,this._binding.factory=t,this._binding.scope=g.Singleton,new Ht(this._binding)},t.prototype.toFunction=function(t){if("function"!=typeof t)throw new Error("Value provided to function binding must be a function!");var n=this.toConstantValue(t);return this._binding.type=b.Function,this._binding.scope=g.Singleton,n},t.prototype.toAutoFactory=function(t){return this._binding.type=b.Factory,this._binding.factory=function(n){return function(){return n.container.get(t)}},this._binding.scope=g.Singleton,new Ht(this._binding)},t.prototype.toAutoNamedFactory=function(t){return this._binding.type=b.Factory,this._binding.factory=function(n){return function(e){return n.container.getNamed(t,e)}},new Ht(this._binding)},t.prototype.toProvider=function(t){return this._binding.type=b.Provider,this._binding.provider=t,this._binding.scope=g.Singleton,new Ht(this._binding)},t.prototype.toService=function(t){this.toDynamicValue((function(n){return n.container.get(t)}))},t}(),Ut=function(){function t(){}return t.of=function(n,e,r,i,o){var a=new t;return a.bindings=n,a.middleware=e,a.deactivations=i,a.activations=r,a.moduleActivationStore=o,a},t}();var zt=function(){function t(){this._map=new Map}return t.prototype.getMap=function(){return this._map},t.prototype.add=function(t,n){if(null==t)throw new Error(I);if(null==n)throw new Error(I);var e=this._map.get(t);void 0!==e?e.push(n):this._map.set(t,[n])},t.prototype.get=function(t){if(null==t)throw new Error(I);var n=this._map.get(t);if(void 0!==n)return n;throw new Error(C)},t.prototype.remove=function(t){if(null==t)throw new Error(I);if(!this._map.delete(t))throw new Error(C)},t.prototype.removeIntersection=function(t){var n=this;this.traverse((function(e,r){var i=t.hasKey(e)?t.get(e):void 0;if(void 0!==i){var o=r.filter((function(t){return!i.some((function(n){return t===n}))}));n._setValue(e,o)}}))},t.prototype.removeByCondition=function(t){var n=this,e=[];return this._map.forEach((function(r,i){for(var o=[],a=0,c=r;a<c.length;a++){var s=c[a];t(s)?e.push(s):o.push(s)}n._setValue(i,o)})),e},t.prototype.hasKey=function(t){if(null==t)throw new Error(I);return this._map.has(t)},t.prototype.clone=function(){var n=new t;return this._map.forEach((function(t,e){t.forEach((function(t){return n.add(e,"object"==typeof(r=t)&&null!==r&&"clone"in r&&"function"==typeof r.clone?t.clone():t);var r}))})),n},t.prototype.traverse=function(t){this._map.forEach((function(n,e){t(e,n)}))},t.prototype._setValue=function(t,n){n.length>0?this._map.set(t,n):this._map.delete(t)},t}(),Jt=function(){function t(){this._map=new Map}return t.prototype.remove=function(t){if(this._map.has(t)){var n=this._map.get(t);return this._map.delete(t),n}return this._getEmptyHandlersStore()},t.prototype.addDeactivation=function(t,n,e){this._getModuleActivationHandlers(t).onDeactivations.add(n,e)},t.prototype.addActivation=function(t,n,e){this._getModuleActivationHandlers(t).onActivations.add(n,e)},t.prototype.clone=function(){var n=new t;return this._map.forEach((function(t,e){n._map.set(e,{onActivations:t.onActivations.clone(),onDeactivations:t.onDeactivations.clone()})})),n},t.prototype._getModuleActivationHandlers=function(t){var n=this._map.get(t);return void 0===n&&(n=this._getEmptyHandlersStore(),this._map.set(t,n)),n},t.prototype._getEmptyHandlersStore=function(){return{onActivations:new zt,onDeactivations:new zt}},t}(),Qt=function(){return Qt=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var i in n=arguments[e])Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i]);return t},Qt.apply(this,arguments)},Zt=function(t,n,e,r){return new(e||(e=Promise))((function(i,o){function a(t){try{s(r.next(t))}catch(t){o(t)}}function c(t){try{s(r.throw(t))}catch(t){o(t)}}function s(t){var n;t.done?i(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(a,c)}s((r=r.apply(t,n||[])).next())}))},Xt=function(t,n){var e,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(o){return function(c){return function(o){if(e)throw new TypeError("Generator is already executing.");for(;a;)try{if(e=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=n.call(t,a)}catch(t){o=[6,t],r=0}finally{e=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,c])}}},$t=function(t,n,e){if(e||2===arguments.length)for(var r,i=0,o=n.length;i<o;i++)!r&&i in n||(r||(r=Array.prototype.slice.call(n,0,i)),r[i]=n[i]);return t.concat(r||Array.prototype.slice.call(n))},tn=function(){function t(t){var n=t||{};if("object"!=typeof n)throw new Error("Invalid Container constructor argument. Container options must be an object.");if(void 0===n.defaultScope)n.defaultScope=g.Transient;else if(n.defaultScope!==g.Singleton&&n.defaultScope!==g.Transient&&n.defaultScope!==g.Request)throw new Error('Invalid Container option. Default scope must be a string ("singleton" or "transient").');if(void 0===n.autoBindInjectable)n.autoBindInjectable=!1;else if("boolean"!=typeof n.autoBindInjectable)throw new Error("Invalid Container option. Auto bind injectable must be a boolean");if(void 0===n.skipBaseClassChecks)n.skipBaseClassChecks=!1;else if("boolean"!=typeof n.skipBaseClassChecks)throw new Error("Invalid Container option. Skip base check must be a boolean");this.options={autoBindInjectable:n.autoBindInjectable,defaultScope:n.defaultScope,skipBaseClassChecks:n.skipBaseClassChecks},this.id=_(),this._bindingDictionary=new zt,this._snapshots=[],this._middleware=null,this._activations=new zt,this._deactivations=new zt,this.parent=null,this._metadataReader=new j,this._moduleActivationStore=new Jt}return t.merge=function(n,e){for(var r=[],i=2;i<arguments.length;i++)r[i-2]=arguments[i];var o=new t,a=$t([n,e],r,!0).map((function(t){return nt(t)})),c=nt(o);return a.forEach((function(t){var n;n=c,t.traverse((function(t,e){e.forEach((function(t){n.add(t.serviceIdentifier,t.clone())}))}))})),o},t.prototype.load=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];for(var e=this._getContainerModuleHelpersFactory(),r=0,i=t;r<i.length;r++){var o=i[r],a=e(o.id);o.registry(a.bindFunction,a.unbindFunction,a.isboundFunction,a.rebindFunction,a.unbindAsyncFunction,a.onActivationFunction,a.onDeactivationFunction)}},t.prototype.loadAsync=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return Zt(this,void 0,void 0,(function(){var n,e,r,i,o;return Xt(this,(function(a){switch(a.label){case 0:n=this._getContainerModuleHelpersFactory(),e=0,r=t,a.label=1;case 1:return e<r.length?(i=r[e],o=n(i.id),[4,i.registry(o.bindFunction,o.unbindFunction,o.isboundFunction,o.rebindFunction,o.unbindAsyncFunction,o.onActivationFunction,o.onDeactivationFunction)]):[3,4];case 2:a.sent(),a.label=3;case 3:return e++,[3,1];case 4:return[2]}}))}))},t.prototype.unload=function(){for(var t=this,n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];n.forEach((function(n){var e=t._removeModuleBindings(n.id);t._deactivateSingletons(e),t._removeModuleHandlers(n.id)}))},t.prototype.unloadAsync=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return Zt(this,void 0,void 0,(function(){var n,e,r,i;return Xt(this,(function(o){switch(o.label){case 0:n=0,e=t,o.label=1;case 1:return n<e.length?(r=e[n],i=this._removeModuleBindings(r.id),[4,this._deactivateSingletonsAsync(i)]):[3,4];case 2:o.sent(),this._removeModuleHandlers(r.id),o.label=3;case 3:return n++,[3,1];case 4:return[2]}}))}))},t.prototype.bind=function(t){var n=this.options.defaultScope||g.Transient,e=new A(t,n);return this._bindingDictionary.add(t,e),new Lt(e)},t.prototype.rebind=function(t){return this.unbind(t),this.bind(t)},t.prototype.rebindAsync=function(t){return Zt(this,void 0,void 0,(function(){return Xt(this,(function(n){switch(n.label){case 0:return[4,this.unbindAsync(t)];case 1:return n.sent(),[2,this.bind(t)]}}))}))},t.prototype.unbind=function(t){if(this._bindingDictionary.hasKey(t)){var n=this._bindingDictionary.get(t);this._deactivateSingletons(n)}this._removeServiceFromDictionary(t)},t.prototype.unbindAsync=function(t){return Zt(this,void 0,void 0,(function(){var n;return Xt(this,(function(e){switch(e.label){case 0:return this._bindingDictionary.hasKey(t)?(n=this._bindingDictionary.get(t),[4,this._deactivateSingletonsAsync(n)]):[3,2];case 1:e.sent(),e.label=2;case 2:return this._removeServiceFromDictionary(t),[2]}}))}))},t.prototype.unbindAll=function(){var t=this;this._bindingDictionary.traverse((function(n,e){t._deactivateSingletons(e)})),this._bindingDictionary=new zt},t.prototype.unbindAllAsync=function(){return Zt(this,void 0,void 0,(function(){var t,n=this;return Xt(this,(function(e){switch(e.label){case 0:return t=[],this._bindingDictionary.traverse((function(e,r){t.push(n._deactivateSingletonsAsync(r))})),[4,Promise.all(t)];case 1:return e.sent(),this._bindingDictionary=new zt,[2]}}))}))},t.prototype.onActivation=function(t,n){this._activations.add(t,n)},t.prototype.onDeactivation=function(t,n){this._deactivations.add(t,n)},t.prototype.isBound=function(t){var n=this._bindingDictionary.hasKey(t);return!n&&this.parent&&(n=this.parent.isBound(t)),n},t.prototype.isCurrentBound=function(t){return this._bindingDictionary.hasKey(t)},t.prototype.isBoundNamed=function(t,n){return this.isBoundTagged(t,i,n)},t.prototype.isBoundTagged=function(t,n,e){var r=!1;if(this._bindingDictionary.hasKey(t)){var i=this._bindingDictionary.get(t),o=function(t,n,e,r){var i=new L(m.Variable,"",n,new V(e,r)),o=new K(t);return new tt(n,o,null,[],i)}(this,t,n,e);r=i.some((function(t){return t.constraint(o)}))}return!r&&this.parent&&(r=this.parent.isBoundTagged(t,n,e)),r},t.prototype.snapshot=function(){this._snapshots.push(Ut.of(this._bindingDictionary.clone(),this._middleware,this._activations.clone(),this._deactivations.clone(),this._moduleActivationStore.clone()))},t.prototype.restore=function(){var t=this._snapshots.pop();if(void 0===t)throw new Error("No snapshot available to restore.");this._bindingDictionary=t.bindings,this._activations=t.activations,this._deactivations=t.deactivations,this._middleware=t.middleware,this._moduleActivationStore=t.moduleActivationStore},t.prototype.createChild=function(n){var e=new t(n||this.options);return e.parent=this,e},t.prototype.applyMiddleware=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=this._middleware?this._middleware:this._planAndResolve();this._middleware=t.reduce((function(t,n){return n(t)}),e)},t.prototype.applyCustomMetadataReader=function(t){this._metadataReader=t},t.prototype.get=function(t){var n=this._getNotAllArgs(t,!1);return this._getButThrowIfAsync(n)},t.prototype.getAsync=function(t){return Zt(this,void 0,void 0,(function(){var n;return Xt(this,(function(e){return n=this._getNotAllArgs(t,!1),[2,this._get(n)]}))}))},t.prototype.getTagged=function(t,n,e){var r=this._getNotAllArgs(t,!1,n,e);return this._getButThrowIfAsync(r)},t.prototype.getTaggedAsync=function(t,n,e){return Zt(this,void 0,void 0,(function(){var r;return Xt(this,(function(i){return r=this._getNotAllArgs(t,!1,n,e),[2,this._get(r)]}))}))},t.prototype.getNamed=function(t,n){return this.getTagged(t,i,n)},t.prototype.getNamedAsync=function(t,n){return this.getTaggedAsync(t,i,n)},t.prototype.getAll=function(t){var n=this._getAllArgs(t);return this._getButThrowIfAsync(n)},t.prototype.getAllAsync=function(t){var n=this._getAllArgs(t);return this._getAll(n)},t.prototype.getAllTagged=function(t,n,e){var r=this._getNotAllArgs(t,!0,n,e);return this._getButThrowIfAsync(r)},t.prototype.getAllTaggedAsync=function(t,n,e){var r=this._getNotAllArgs(t,!0,n,e);return this._getAll(r)},t.prototype.getAllNamed=function(t,n){return this.getAllTagged(t,i,n)},t.prototype.getAllNamedAsync=function(t,n){return this.getAllTaggedAsync(t,i,n)},t.prototype.resolve=function(t){var n=this.isBound(t);n||this.bind(t).toSelf();var e=this.get(t);return n||this.unbind(t),e},t.prototype._preDestroy=function(t,n){var e,r;if(Reflect.hasMetadata(y,t))return null===(r=(e=n)[Reflect.getMetadata(y,t).value])||void 0===r?void 0:r.call(e)},t.prototype._removeModuleHandlers=function(t){var n=this._moduleActivationStore.remove(t);this._activations.removeIntersection(n.onActivations),this._deactivations.removeIntersection(n.onDeactivations)},t.prototype._removeModuleBindings=function(t){return this._bindingDictionary.removeByCondition((function(n){return n.moduleId===t}))},t.prototype._deactivate=function(t,n){var e=this,r=Object.getPrototypeOf(n).constructor;try{if(this._deactivations.hasKey(t.serviceIdentifier)){var i=this._deactivateContainer(n,this._deactivations.get(t.serviceIdentifier).values());if(at(i))return this._handleDeactivationError(i.then((function(){return e._propagateContainerDeactivationThenBindingAndPreDestroyAsync(t,n,r)})),r)}var o=this._propagateContainerDeactivationThenBindingAndPreDestroy(t,n,r);if(at(o))return this._handleDeactivationError(o,r)}catch(t){if(t instanceof Error)throw new Error(M(r.name,t.message))}},t.prototype._handleDeactivationError=function(t,n){return Zt(this,void 0,void 0,(function(){var e;return Xt(this,(function(r){switch(r.label){case 0:return r.trys.push([0,2,,3]),[4,t];case 1:return r.sent(),[3,3];case 2:if((e=r.sent())instanceof Error)throw new Error(M(n.name,e.message));return[3,3];case 3:return[2]}}))}))},t.prototype._deactivateContainer=function(t,n){for(var e=this,r=n.next();r.value;){var i=r.value(t);if(at(i))return i.then((function(){return e._deactivateContainerAsync(t,n)}));r=n.next()}},t.prototype._deactivateContainerAsync=function(t,n){return Zt(this,void 0,void 0,(function(){var e;return Xt(this,(function(r){switch(r.label){case 0:e=n.next(),r.label=1;case 1:return e.value?[4,e.value(t)]:[3,3];case 2:return r.sent(),e=n.next(),[3,1];case 3:return[2]}}))}))},t.prototype._getContainerModuleHelpersFactory=function(){var t=this,n=function(t,n){t._binding.moduleId=n},e=function(e){return function(r){var i=t.rebind(r);return n(i,e),i}},r=function(n){return function(e,r){t._moduleActivationStore.addActivation(n,e,r),t.onActivation(e,r)}},i=function(n){return function(e,r){t._moduleActivationStore.addDeactivation(n,e,r),t.onDeactivation(e,r)}};return function(o){return{bindFunction:(a=o,function(e){var r=t.bind(e);return n(r,a),r}),isboundFunction:function(n){return t.isBound(n)},onActivationFunction:r(o),onDeactivationFunction:i(o),rebindFunction:e(o),unbindFunction:function(n){return t.unbind(n)},unbindAsyncFunction:function(n){return t.unbindAsync(n)}};var a}},t.prototype._getAll=function(t){return Promise.all(this._get(t))},t.prototype._get=function(t){var n=Qt(Qt({},t),{contextInterceptor:function(t){return t},targetType:m.Variable});if(this._middleware){var e=this._middleware(n);if(null==e)throw new Error("Invalid return type in middleware. Middleware must return!");return e}return this._planAndResolve()(n)},t.prototype._getButThrowIfAsync=function(t){var n=this._get(t);if(ct(n))throw new Error("You are attempting to construct '"+t.serviceIdentifier+"' in a synchronous way\n but it has asynchronous dependencies.");return n},t.prototype._getAllArgs=function(t){return{avoidConstraints:!0,isMultiInject:!0,serviceIdentifier:t}},t.prototype._getNotAllArgs=function(t,n,e,r){return{avoidConstraints:!1,isMultiInject:n,serviceIdentifier:t,key:e,value:r}},t.prototype._planAndResolve=function(){var t=this;return function(n){var e=ot(t._metadataReader,t,n.isMultiInject,n.targetType,n.serviceIdentifier,n.key,n.value,n.avoidConstraints);return function(t){return Ct(t.plan.rootRequest.requestScope)(t.plan.rootRequest)}(e=n.contextInterceptor(e))}},t.prototype._deactivateIfSingleton=function(t){var n=this;if(t.activated)return at(t.cache)?t.cache.then((function(e){return n._deactivate(t,e)})):this._deactivate(t,t.cache)},t.prototype._deactivateSingletons=function(t){for(var n=0,e=t;n<e.length;n++){var r=e[n];if(at(this._deactivateIfSingleton(r)))throw new Error("Attempting to unbind dependency with asynchronous destruction (@preDestroy or onDeactivation)")}},t.prototype._deactivateSingletonsAsync=function(t){return Zt(this,void 0,void 0,(function(){var n=this;return Xt(this,(function(e){switch(e.label){case 0:return[4,Promise.all(t.map((function(t){return n._deactivateIfSingleton(t)})))];case 1:return e.sent(),[2]}}))}))},t.prototype._propagateContainerDeactivationThenBindingAndPreDestroy=function(t,n,e){return this.parent?this._deactivate.bind(this.parent)(t,n):this._bindingDeactivationAndPreDestroy(t,n,e)},t.prototype._propagateContainerDeactivationThenBindingAndPreDestroyAsync=function(t,n,e){return Zt(this,void 0,void 0,(function(){return Xt(this,(function(r){switch(r.label){case 0:return this.parent?[4,this._deactivate.bind(this.parent)(t,n)]:[3,2];case 1:return r.sent(),[3,4];case 2:return[4,this._bindingDeactivationAndPreDestroyAsync(t,n,e)];case 3:r.sent(),r.label=4;case 4:return[2]}}))}))},t.prototype._removeServiceFromDictionary=function(t){try{this._bindingDictionary.remove(t)}catch(n){throw new Error("Could not unbind serviceIdentifier: "+k(t))}},t.prototype._bindingDeactivationAndPreDestroy=function(t,n,e){var r=this;if("function"==typeof t.onDeactivation){var i=t.onDeactivation(n);if(at(i))return i.then((function(){return r._preDestroy(e,n)}))}return this._preDestroy(e,n)},t.prototype._bindingDeactivationAndPreDestroyAsync=function(t,n,e){return Zt(this,void 0,void 0,(function(){return Xt(this,(function(r){switch(r.label){case 0:return"function"!=typeof t.onDeactivation?[3,2]:[4,t.onDeactivation(n)];case 1:r.sent(),r.label=2;case 2:return[4,this._preDestroy(e,n)];case 3:return r.sent(),[2]}}))}))},t}(),nn=function(t){this.id=_(),this.registry=t},en=function(t){this.id=_(),this.registry=t};function rn(t,n,e,r){!function(t){if(void 0!==t)throw new Error(x)}(n),an(l,t,e.toString(),r)}function on(t){var n=[];if(Array.isArray(t)){var e=function(t){for(var n=new Set,e=0,r=t;e<r.length;e++){var i=r[e];if(n.has(i))return i;n.add(i)}}((n=t).map((function(t){return t.key})));if(void 0!==e)throw new Error(T+" "+e.toString())}else n=[t];return n}function an(t,n,e,r){var i=on(r),o={};Reflect.hasOwnMetadata(t,n)&&(o=Reflect.getMetadata(t,n));var a=o[e];if(void 0===a)a=[];else for(var c=function(t){if(i.some((function(n){return n.key===t.key})))throw new Error(T+" "+t.key.toString())},s=0,u=a;s<u.length;s++){c(u[s])}a.push.apply(a,i),o[e]=a,Reflect.defineMetadata(t,o,n)}function cn(t){return function(n,e,r){"number"==typeof r?rn(n,e,r,t):function(t,n,e){if(void 0!==t.prototype)throw new Error(x);an(d,t.constructor,n,e)}(n,e,t)}}function sn(t,n){Reflect.decorate(t,n)}function un(t,n){return function(e,r){n(e,r,t)}}function ln(t,n,e){"number"==typeof e?sn([un(e,t)],n):"string"==typeof e?Reflect.decorate([t],n,e):sn([t],n)}function dn(){return function(t){if(Reflect.hasOwnMetadata(f,t))throw new Error(S);var n=Reflect.getMetadata(h,t)||[];return Reflect.defineMetadata(f,n,t),t}}function fn(t,n){return cn(new V(t,n))}function hn(t){return cn(new V(i,t))}function pn(t){return function(n){return function(e,r,i){if(void 0===n){var o="function"==typeof e?e.name:e.constructor.name;throw new Error("@inject called with undefined this could mean that the class "+o+" has a circular dependency problem. You can use a LazyServiceIdentifier to  overcome this limitation.")}return cn(new V(t,n))(e,r,i)}}}var yn=pn(s);function vn(){return cn(new V(c,!0))}function gn(){return function(t,n,e){rn(t,n,e,new V(a,!0))}}var bn=pn(u);function mn(t){return function(n,e,r){rn(n,e,r,new V(o,t))}}function wn(t,n){return function(){return function(e,r){var i=new V(t,r);if(Reflect.hasOwnMetadata(t,e.constructor))throw new Error(n);Reflect.defineMetadata(t,i,e.constructor)}}}var _n,An=wn(p,"Cannot apply @postConstruct decorator multiple times in the same class"),Sn=wn(y,"Cannot apply @preDestroy decorator multiple times in the same class");_n||(_n={});var Tn=r},2517:function(t,n,e){var r=this&&this.__decorate||function(t,n,e,r){var i,o=arguments.length,a=o<3?n:null===r?r=Object.getOwnPropertyDescriptor(n,e):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,n,e,r);else for(var c=t.length-1;c>=0;c--)(i=t[c])&&(a=(o<3?i(a):o>3?i(n,e,a):i(n,e))||a);return o>3&&a&&Object.defineProperty(n,e,a),a};Object.defineProperty(n,"__esModule",{value:!0}),n.HelloWorldExtension=n.default=void 0;const i=e(3343),o=e(1705),a=e(467),c=e(781);let s=class HelloWorldExtension extends o.AbstractModule{constructor(){super(...arguments),this.name="HelloWorldExtension"}startModule(){(0,a.sayHello)()}};s=r([(0,i.injectable)()],s),n.default=s,n.HelloWorldExtension=s,c.default.getKitsuneFactories().set("HelloWorldExtension",s)},5187:(t,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.AbstractAsyncRequest=void 0;n.AbstractAsyncRequest=class AbstractAsyncRequest{request(t){console.log("this is abstract implementation of ICommand, please make sure to override")}}},5481:(t,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.AbstractCommand=void 0;n.AbstractCommand=class AbstractCommand{run(){console.log("this is abstract implementation of ICommand, please make sure to override")}}},3570:(t,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.AbstractModule=void 0;n.AbstractModule=class AbstractModule{constructor(){this.name="Abstract"}startModule(){console.info("this is abstract implementation of IInjectableExtensionModule, please make sure to override")}}},9809:(t,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.AbstractParser=void 0;n.AbstractParser=class AbstractParser{constructor(){this.name=""}parse(t){console.log("WARNING: AbstractParser - parse called")}startModule(){}}},3558:(t,n,e)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.AbstractSockComm=void 0;const r=e(3570);class AbstractSockComm extends r.AbstractModule{constructor(){super(...arguments),this.clientMap=new Map,this.id="",this.totals=[]}run(t){return console.warn("Abstract Socket Comm run() was triggered  \nOverride this function in your own Socket \nExtension, or use the KSockService extension\n"),this}}n.AbstractSockComm=AbstractSockComm},8440:(t,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.AbstractSoundService=void 0;n.AbstractSoundService=class AbstractSoundService{loadSound(t){console.log("this is abstract implementation of ISoundService, please make sure to override")}}},2896:(t,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.TYPES=void 0,n.TYPES={FetchConfig:Symbol.for("FetchConfig"),Command:Symbol.for("Command"),LoadModule:Symbol.for("LoadModule"),InjectionTest:Symbol.for("InjectionTest"),Socket:Symbol.for("KSockService"),AssetData:Symbol.for("AssetDataVendor")}},6523:(t,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.SOCK=void 0,n.SOCK={CONNECT:"connect",AUTH_TOKEN:"AUTH_TOKEN",KICK:"disconnect",SOCK_ID:"SOCK_ID",GZIPPED_EVENT:"GZIP",AP_REQ:"assetPackREQ",CONNECTION:"connection",AP_RES:"assetPackRES"}},781:(t,n)=>{Object.defineProperty(n,"__esModule",{value:!0});class KitsuneHelper{constructor(){const t=window;"undefined"==typeof window||t.kitsuneExtensionFactories||this.createSingleton()}createSingleton(){window.kitsuneExtensionFactories=new Map}static getInstance(){var t;return null!==(t=KitsuneHelper.singletonInstance)&&void 0!==t?t:new KitsuneHelper}static getKitsuneFactories(){return void 0===window.kitsuneExtensionFactories&&new KitsuneHelper,window.kitsuneExtensionFactories}static asyncAwait(t){return KitsuneHelper.getInstance().asyncAwait(t)}asyncAwait(t){return t.then((t=>t))}}n.default=KitsuneHelper,KitsuneHelper.DEFAULT_PORTS={WS_PORT:8080,ASSET_STORE:8081},KitsuneHelper.kChar="🦊"},1705:(t,n,e)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.SOCK=n.TYPES=n.AbstractParser=n.AbstractAsyncRequest=n.AbstractCommand=n.AbstractSoundService=n.AbstractModule=n.AbstractSockComm=void 0;var r=e(3558);Object.defineProperty(n,"AbstractSockComm",{enumerable:!0,get:function(){return r.AbstractSockComm}});var i=e(3570);Object.defineProperty(n,"AbstractModule",{enumerable:!0,get:function(){return i.AbstractModule}});var o=e(8440);Object.defineProperty(n,"AbstractSoundService",{enumerable:!0,get:function(){return o.AbstractSoundService}});var a=e(5481);Object.defineProperty(n,"AbstractCommand",{enumerable:!0,get:function(){return a.AbstractCommand}});var c=e(5187);Object.defineProperty(n,"AbstractAsyncRequest",{enumerable:!0,get:function(){return c.AbstractAsyncRequest}});var s=e(9809);Object.defineProperty(n,"AbstractParser",{enumerable:!0,get:function(){return s.AbstractParser}});var u=e(2896);Object.defineProperty(n,"TYPES",{enumerable:!0,get:function(){return u.TYPES}});var l=e(6523);Object.defineProperty(n,"SOCK",{enumerable:!0,get:function(){return l.SOCK}})}},n={};function e(r){var i=n[r];if(void 0!==i)return i.exports;var o=n[r]={exports:{}};return t[r].call(o.exports,o,o.exports,e),o.exports}e.d=(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),e.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e(2517);e(467)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,